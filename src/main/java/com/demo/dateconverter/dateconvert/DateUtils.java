package com.demo.dateconverter.dateconvert;

/**
 * @Author: Milan Paudyal
 * @Date: 1/28/19,Mon
 **/



import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Objects;

public class DateUtils {
    private static final int startNepaliYear = 2000;

    private static final CustomDate startEnglishDate = new CustomDate(1943, 4, 14);

    private static final int[][] data = (int[][]) (new int[][]{{30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31}, {30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31}, {31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31}, {31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31}, {31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31}, {31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31}, {31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31}, {30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31}, {30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31}, {30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31}, {31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31}, {31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31}, {31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31}, {31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31}, {30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31}, {30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31}, {31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31}, {31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31}, {31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31}, {31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30}, {31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30}, {31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30}, {30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30}, {31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30}, {31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30}, {31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30}, {30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30}, {31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30}, {30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30}, {30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30}, {30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30}});

    public static int getStartNepaliYear() {
        return startNepaliYear;
    }


    public static CustomDate getStartEnglishDate() {
        return startEnglishDate;
    }


    public static int[][] getData() {
        return data;
    }

    private static final int getNumYears() {
        return ((Object[]) data).length;
    }

    public static int getNumDaysNepCal(int year, int month) {
        try {
            return data[year - startNepaliYear][month - 1];
        } catch (ArrayIndexOutOfBoundsException var3) {
            return 0;
        }
    }

    public static int getNumDaysEngCal(int year, int month) {
        return (new GregorianCalendar(year, month, 1)).getActualMaximum(5);
    }


    static CustomDate getNepaliDate(CustomDate engDate) {
        if (Objects.nonNull(engDate)) {
            int days = startEnglishDate.getDaysTill(engDate) + 1;
            int i = 0;

            for (int var3 = getNumYears(); i < var3; ++i) {
                int j = 0;

                for (byte var5 = 11; j <= var5; ++j) {
                    if (days <= data[i][j]) {
                        return new CustomDate(i + startNepaliYear, j + 1, days);
                    }
                    days -= data[i][j];
                }
            }
        }
        return null;
    }

    static final CustomDate getEnglishDate(CustomDate nepDate) {
        int days = 0;
        int year = nepDate.getYear() - startNepaliYear;
        int i = 0;
        int var4 = year;
        if (i <= year) {
            while (true) {
                int j = 0;

                for (byte var6 = 11; j <= var6; ++j) {
                    if (i == year && j == nepDate.getMonth() - 1) {
                        days += nepDate.getDay() - 1;
                        Calendar c = startEnglishDate.getCalendar();
                        c.add(5, days);
                        return new CustomDate(c);
                    }

                    days += data[i][j];
                }

                if (i == var4) {
                    break;
                }

                ++i;
            }
        }

        return null;
    }
}
